---
title: "Ethics in plotting"
subtitle: "Communication & Deception"
author:
  - Elizabeth King
  - Kevin Middleton
format:
  revealjs:
    theme: [default, custom.scss]
    standalone: true
    self-contained: true
    logo: QMLS_Logo.png
    slide-number: true
    show-slide-number: all
    link-external-newwindow: true
---

## Responsibility

```{r}
#| label: setup
#| echo: false
#| warning: false
#| message: false

library(tidyverse)
library(cowplot)
library(colorblindr)
library(paletteer)
ggplot2::theme_set(theme_cowplot())
```

- The first goal is honest communication
- Accurately and realistically represent the effect (or lack of)
- Match your statistics
- Digestible version often leaves out important details


## Readings

- [Data science ethics](https://mdsr-book.github.io/mdsr2e/ch-ethics.html) in *Modern Data Science with R* by Baumer, Kaplan, and Horton
- [The Ethics of Data Visualization](https://medium.com/@peter.haferl/the-ethical-responsibilities-of-data-visualization-4d12b7c9640d)


## Example

Two variables with a lot of samples. Similar standard deviations. Means differ by 0.5%

```{r}
set.seed(436248)
M <- tibble(x1 = rnorm(1e4, 90, 0.25),
            x2 = rnorm(1e4, 90.5, 0.25))

M

M |> 
  summarize(across(.fns = c(Mean = mean, SD = sd))) |> 
  print(digits = 3)

M <- M |> 
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value")
```


## Two ways to plot the same data

```{r}
p1 <- ggplot(M, aes(Value, color = Variable)) +
  geom_line(stat = "density", size = 1.5) +
  scale_color_OkabeIto() +
  labs(x = "Meaurement", y = "Density",
       title = "Default x Scale") +
  theme(legend.position = c(0.8, 0.8))

p2 <- ggplot(M, aes(Value, color = Variable)) +
  geom_line(stat = "density", size = 1.5) +
  scale_color_OkabeIto() +
  scale_x_continuous(limits = c(80, 100)) +
  labs(x = "Meaurement", y = "Density",
       title = "x Scaled to Biological Range") +
  theme(legend.position = c(0.8, 0.8))
plot_grid(p1, p2, ncol = 2)
```


## Always show as much of the raw data as you can

[Dynamite plots must die](https://simplystatistics.org/posts/2019-02-21-dynamite-plots-must-die/)

```{r}

set.seed(3775222)

dyndat <- tibble("Treatment" = c(rep("A",20),rep("B", 20)),
                 "Outcome" = c(rnorm(20), rnorm(20,1))) 

d1 <- ggplot(dyndat, aes(Treatment, Outcome)) +
  #geom_point(position = position_jitter(width = 0.05), alpha = 0.5) +
  stat_summary(fun = mean, geom = "point", size = 3, color = "red") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.05,
               color = "red", linewidth = 0.7)
d1

```


## Always show as much of the raw data as you can

[Dynamite plots must die](https://simplystatistics.org/posts/2019-02-21-dynamite-plots-must-die/)

```{r}

d1 <- ggplot(dyndat, aes(Treatment, Outcome)) +
  geom_point(position = position_jitter(width = 0.05), alpha = 0.5) +
  stat_summary(fun = mean, geom = "point", size = 3, color = "red") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.05,
               color = "red", linewidth = 0.7)
d1

```


## Always show as much of the raw data as you can

[Dynamite plots must die](https://simplystatistics.org/posts/2019-02-21-dynamite-plots-must-die/)

```{r}

dyndat <- tibble("Treatment" = c(rep("A",20),rep("B", 20)),
                 "Outcome" = c(rnorm(20), rnorm(17), 25,20,18)) 

d1 <- ggplot(dyndat, aes(Treatment, Outcome)) +
  #geom_point(position = position_jitter(width = 0.05), alpha = 0.5) +
  stat_summary(fun = mean, geom = "point", size = 3, color = "red") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.05,
               color = "red", linewidth = 0.7)
d1

```


## Always show as much of the raw data as you can

[Dynamite plots must die](https://simplystatistics.org/posts/2019-02-21-dynamite-plots-must-die/)

```{r}

d1 <- ggplot(dyndat, aes(Treatment, Outcome)) +
  geom_point(position = position_jitter(width = 0.05), alpha = 0.5) +
  stat_summary(fun = mean, geom = "point", size = 3, color = "red") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.05,
               color = "red", linewidth = 0.7)
d1

```


## The complexity - communication challenge

```{r}
library(palmerpenguins)
penguins <- penguins |> 
  mutate(sex = if_else(sex == "female", "Female", "Male"))

penguins |> 
  drop_na(body_mass_g, sex) |> 
  mutate(year = factor(year)) |> 
  ggplot(aes(x = year, y = body_mass_g, color = species, shape = island)) +
  geom_point(position = position_jitter(width = 0.1)) +
  labs(x = "Year", y = "Body Mass (g)") +
  scale_color_paletteer_d(`"beyonce::X56"`, name = "Species") +
  scale_shape_manual(values = c(1, 3, 16), name = "Island") +
  facet_grid(species ~ sex)

```

